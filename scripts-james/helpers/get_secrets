#!/usr/bin/env bash
set -e
# First of all, sign in!
if [[ ! -f ~/.ssh/id_ed25519 ]]; then
	op signin costian jamescostian@gmail.com
	mkdir -p ~/.ssh
	op get document 5fqgog25ivec34grsyqbofjd6m > ~/.ssh/id_ed25519
	op get document lhif5tpa3dm3imo52vdjbrxuci > ~/.ssh/id_ed25519.pub
	chmod 0600 ~/.ssh/*
else
	op list vaults > /dev/null 2>&1 || eval $(op signin costian)
fi

if [[ ! -f ~/.config/sublime-text-3/Local/License.sublime_license ]]; then
	mkdir -p ~/.config/sublime-text-3/Local
	op get item Sublime\ Text | jq '.details.sections[0].fields[1].v' -r > ~/.config/sublime-text-3/Local/License.sublime_license
fi

if [[ ! -f ~/.gnupg/pubring.kbx ]]; then
	op get document xhrjl3vs5i22tdiu2lmv7mgq4m | gpg --import -
	expect -c "spawn gpg --edit-key 77E30DB4F230282981ED38EEDDF677A250F99DFD trust quit; send \"5\ry\r\"; expect eof"
fi


WIFI_IFNAME=`nmcli d | grep '\swifi\s' | awk '{print $1}'`
for WIFI_UUID in $(op list items | jq '.[] | select(.templateUuid == "109").uuid' -r); do
	WIFI_JSON="$(op get item $WIFI_UUID)"
	# Name is the name in 1Password, not the SSID of the actual WiFi AP
	WIFI_NAME="$(echo $WIFI_JSON | jq '.overview.title' -r)"
	# Now get the credentials for logging into the router
	WIFI_LOGIN_JSON="$(echo $WIFI_JSON | jq '.details.sections | .[] | select(has("fields")).fields | .[]')"
	WIFI_SSID="$(echo $WIFI_LOGIN_JSON | jq 'select(.t == "base station name").v' -r)"
	WIFI_PASSWORD="$(echo $WIFI_LOGIN_JSON | jq 'select(.t == "base station password").v' -r)"
	# Create this WiFi connection if it doesn't exist, otherwise modify it
	if nmcli c show "$WIFI_NAME" 2&>1 | grep "no such connection profile.$" > /dev/null; then
		nmcli c add type wifi con-name "$WIFI_NAME" ifname "$WIFI_IFNAME" ssid "$WIFI_SSID"
	else
		nmcli c modify "$WIFI_NAME" ifname "$WIFI_IFNAME" ssid "$WIFI_SSID"
	fi
	nmcli c modify "$WIFI_NAME" wifi-sec.key-mgmt wpa-psk wifi-sec.psk "$WIFI_PASSWORD"
done

if ! npm whoami > /dev/null 2>&1; then
  # NPM_LOGIN_DETAILS="$(1p get item npm | jq '.details.fields')"
  # NPM_USERNAME="echo $NPM_LOGIN_DETAILS | jq -r '.[] | select(.name == "username").value'"
  # NPM_PASSWORD="echo $NPM_LOGIN_DETAILS | jq -r '.[] | select(.name == "password").value'"
  # NPM_TOTP="$(1p get totp npm)"
  npm adduser
  docker login
fi

#!/usr/bin/env bash
set -eo pipefail

# SECTION 1: THINGS THAT CAN BE DOWNLOADED ONCE, AND DO NOT CHANGE

function 1p {
	set +e
	if [[ "$1" != "signin" && "$1" != "signout" && "$1" != "suspend" && "$1" != "reactivate" ]]; then
		# Check if signed in by looking at vaults (takes the least time to load).
		if ! op list vaults > /dev/null 2>&1; then
			# Not logged in. Try to log in if not already logged in
			if [[ ! -f "$HOME/.op/config" && ! -f "$HOME/.config/op/config" ]]; then
				# Oh wait, this machine has never been signed in on!
				echo '/!\ Do not type your master password yet! /!\'
				op --cache signin costian jamescostian@gmail.com
			fi
			eval $(op --cache signin costian)
		fi
	fi
	set -e
	op --cache "$@"
}

# Next, get SSH keys and GPG keys
mkdir -p ~/.ssh
chmod 0700 ~/.ssh
if [[ ! -f ~/.ssh/id_ed25519 ]]; then
	1p get document 5fqgog25ivec34grsyqbofjd6m > ~/.ssh/id_ed25519
	1p get document lhif5tpa3dm3imo52vdjbrxuci > ~/.ssh/id_ed25519.pub
fi
if [[ ! -f ~/.ssh/id_rsa ]]; then
	1p get document ig33cy2zkf5zxxlppqenfnoxbu > ~/.ssh/id_rsa
	1p get document 7gw2rk7ebrlrr3ukidw3n6udp4 > ~/.ssh/id_rsa.pub
fi

set +e
if [[ ! -f ~/.gnupg/pubring.kbx ]] || gpg --list-keys | grep 77E30DB4F230282981ED38EEDDF677A250F99DFD > /dev/null; then
	set -e
	1p get document xhrjl3vs5i22tdiu2lmv7mgq4m | gpg --import -
	expect -c "spawn gpg --edit-key 77E30DB4F230282981ED38EEDDF677A250F99DFD trust quit; send \"5\ry\r\"; expect eof"
else
	set -e
fi

# Add Tizonia config
if [[ ! -f ~/.config/tizonia/tizonia.conf ]]; then
	mkdir -p ~/.config/tizonia
	chmod 0700 ~/.config/tizonia
	1p get document c62c6tfbybglmxnavvtpqqhjry > ~/.config/tizonia/tizonia.conf
fi

# Add software licenses
if [[ -d ~/.config/sublime-text-3 && ! -f ~/.config/sublime-text-3/Local/License.sublime_license ]]; then
	mkdir -p ~/.config/sublime-text-3/Local
	1p get item Sublime\ Text | jq '.details.sections[0].fields[1].v' -r > ~/.config/sublime-text-3/Local/License.sublime_license
fi

# Log in to apps
if ! npm whoami > /dev/null 2>&1; then
	NPM_LOGIN_DETAILS="$(1p get item npm | jq '.details.fields')"
	NPM_USERNAME="$(echo $NPM_LOGIN_DETAILS | jq -r '.[] | select(.name == "username").value')"
	NPM_PASSWORD="$(echo $NPM_LOGIN_DETAILS | jq -r '.[] | select(.name == "password").value')"
	NPM_TOTP="$(1p get totp npm)"
	expect <<EOE
spawn npm adduser
expect {
  "Username:" {send "$NPM_USERNAME\r"; exp_continue}
  "Password:" {send "$NPM_PASSWORD\r"; exp_continue}
  "Email: (this IS public)" {send "james@jamescostian.com\r"; exp_continue}
	"Enter one-time password from your authenticator app:" {send "$NPM_TOTP\r"; exp_continue}
}
EOE
fi

# Log in to docker. Not sure if logged in or not, so just log out, and then log in :)
DOCKER_LOGIN_DETAILS="$(1p get item 'Docker Hub' | jq '.details.fields')"
set +e # Not needed right now, but docker could make docker logout (when you aren't really logged in) throw an error
docker logout > /dev/null 2> /dev/null
# Try logging in
if ! docker login -u "$(echo $DOCKER_LOGIN_DETAILS | jq -r '.[] | select(.name == "username").value')" -p "$(echo $DOCKER_LOGIN_DETAILS | jq -r '.[] | select(.name == "password").value')" > /dev/null 2> /dev/null; then
	if ! docker ps; then
		echo "Unable to log into docker right now, please restart your machine and run:"
		echo "  ~/.config/scripts$MULTITENANT_SUFFIX/helpers/get-secrets"
		echo
	else
		echo "Failed to log in to docker!"
		exit 1
	fi
fi
set -e

# SECTION 2: THINGS THAT CHANGE
# What makes this complicated is that you don't know for sure if you should overwrite the local config.
# Solution: save the local config to /tmp and echo its details
# Unfortunately, it's hard to implement this with some things...

# Import SSH config
if [[ ! -f ~/.ssh/config ]]; then
	1p get document "SSH Config" > ~/.ssh/config
else
	TMPDIR="$(mktemp -d)"
	mv ~/.ssh/config "$TMPDIR"
	1p get document "SSH Config" > ~/.ssh/config
	# Delete the temporary stuff if there are no differences at all
	if cmp "$TMPDIR/config" ~/.ssh/config > /dev/null; then
		rm -Rf "$TMPDIR/config"
	else
		echo "Overwrote ~/.ssh/config. Find your version in $TMPDIR/config"
	fi
fi
chmod 0600 ~/.ssh/*

if [[ "$(uname)" != "Darwin" ]]; then
	# Add known WiFi networks
	# First, find the wifi interface, and only proceed if there actually is one
	WIFI_IFNAME=`nmcli d | grep '\swifi\s' | awk '{print $1}'`
	if [[ ! -z "$WIFI_IFNAME" ]]; then
		for WIFI_UUID in $(1p list items | jq '.[] | select(.templateUuid == "109").uuid' -r); do
			WIFI_JSON="$(1p get item $WIFI_UUID)"
			# Name is the name in 1Password, not the SSID of the actual WiFi AP
			WIFI_NAME="$(echo $WIFI_JSON | jq '.overview.title' -r)"
			# Now get the credentials for logging into the router
			WIFI_LOGIN_JSON="$(echo $WIFI_JSON | jq '.details.sections | .[] | select(has("fields")).fields | .[]')"
			WIFI_SSID="$(echo $WIFI_LOGIN_JSON | jq 'select(.t == "base station name").v' -r)"
			WIFI_PASSWORD="$(echo $WIFI_LOGIN_JSON | jq 'select(.t == "base station password").v' -r)"
			# Create this WiFi connection if it doesn't exist, otherwise modify it
			if nmcli c show "$WIFI_NAME" 2>&1 | grep "no such connection profile.$" > /dev/null; then
				nmcli c modify "$WIFI_NAME" ifname "$WIFI_IFNAME" ssid "$WIFI_SSID"
			else
				nmcli c add type wifi con-name "$WIFI_NAME" ifname "$WIFI_IFNAME" ssid "$WIFI_SSID"
			fi
			# TODO: save previous password somewhere if they are different!
			nmcli c modify "$WIFI_NAME" wifi-sec.key-mgmt wpa-psk wifi-sec.psk "$WIFI_PASSWORD"
		done
		# TODO: delete wifi networks not in 1Password (after saving them elsewhere, in /tmp/...)
	fi
fi
